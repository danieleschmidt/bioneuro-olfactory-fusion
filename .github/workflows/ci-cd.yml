name: BioNeuro-Olfactory-Fusion CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Code Quality
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Bandit security scan
        run: |
          pip install bandit[toml]
          bandit -r bioneuro_olfactory/ -f json -o bandit-results.json
        continue-on-error: true
      
      - name: Upload Bandit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-results
          path: bandit-results.json

  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,testing]
      
      - name: Run Black formatter check
        run: black --check --diff bioneuro_olfactory/ tests/
      
      - name: Run isort import sorting check
        run: isort --check-only --diff bioneuro_olfactory/ tests/
      
      - name: Run Ruff linting
        run: ruff check bioneuro_olfactory/ tests/
      
      - name: Run MyPy type checking
        run: mypy bioneuro_olfactory/ --ignore-missing-imports
      
      - name: Check docstring coverage
        run: |
          pip install docstring-coverage
          docstring-coverage bioneuro_olfactory/ --badge=badges/docstring-coverage.svg
      
      - name: Upload docstring coverage badge
        uses: actions/upload-artifact@v3
        with:
          name: docstring-coverage-badge
          path: badges/

  # Unit and Integration Tests
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bioneuro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsndfile1 libasound2-dev portaudio19-dev
      
      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install portaudio
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -e .[dev,testing,sensors]
      
      - name: Run unit tests
        env:
          DATABASE_TYPE: postgresql
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: bioneuro_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          pytest tests/unit/ -v --cov=bioneuro_olfactory --cov-report=xml --cov-report=html
      
      - name: Run integration tests
        env:
          DATABASE_TYPE: postgresql
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: bioneuro_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          pytest tests/integration/ -v --cov=bioneuro_olfactory --cov-append --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
            .coverage

  # Performance and Load Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,testing]
          pip install locust pytest-benchmark
      
      - name: Run performance benchmarks
        run: |
          pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json
      
      - name: Run load tests
        run: |
          # Start API server in background
          python -m bioneuro_olfactory.api.server &
          sleep 10
          
          # Run load tests
          locust -f tests/load/locustfile.py --headless -u 10 -r 2 -t 60s --host=http://localhost:8000
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            benchmark.json
            locust_*.html

  # Build and Test Docker Images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      
      - name: Build and test development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.multi-stage
          target: development
          push: false
          tags: bioneuro-dev:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test development image
        run: |
          docker run --rm bioneuro-dev:test python -c "import bioneuro_olfactory; print('Development image OK')"
      
      - name: Build and test production image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.multi-stage
          target: production
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test production image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} python -c "import bioneuro_olfactory; print('Production image OK')"
      
      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'docker-trivy-results.sarif'
      
      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'docker-trivy-results.sarif'

  # End-to-End Testing
  e2e-test:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    needs: [docker-build]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bioneuro_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to be ready
      
      - name: Run E2E tests
        run: |
          pip install pytest requests
          pytest tests/e2e/ -v --timeout=300
      
      - name: Collect logs
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml logs > e2e-logs.txt
      
      - name: Upload E2E results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: |
            e2e-logs.txt
            tests/e2e/screenshots/
      
      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Documentation Build and Deploy
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[docs]
          pip install sphinx-rtd-theme
      
      - name: Build documentation
        run: |
          cd docs/
          make html
          make latexpdf || echo "PDF build failed, continuing..."
      
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: |
            docs/_build/html/
            docs/_build/latex/*.pdf
      
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html

  # Release Creation
  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [test, docker-build, e2e-test, performance-test]
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip build twine
      
      - name: Build package
        run: |
          python -m build
      
      - name: Generate changelog
        run: |
          pip install gitpython
          python scripts/generate_changelog.py > RELEASE_NOTES.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: RELEASE_NOTES.md
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Publish to PyPI
        if: "!contains(github.ref, 'alpha') && !contains(github.ref, 'beta')"
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*

  # Notification and Reporting
  notify:
    name: Notify Results
    if: always()
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test, docker-build, e2e-test]
    steps:
      - name: Send Slack notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd'
          text: |
            🚨 BioNeuro-Olfactory-Fusion CI/CD Pipeline Failed!
            
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref }}
            Author: ${{ github.actor }}
            
            Failed Jobs: ${{ join(needs.*.result, ', ') }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Update README badges
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Updating README badges..."
          # This would update badges for test coverage, build status, etc.

  # Cleanup
  cleanup:
    name: Cleanup
    if: always()
    runs-on: ubuntu-latest
    needs: [test, docker-build, e2e-test]
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 30
          keep_minimum_runs: 10